<<Energy Efficiency Guide for iOS Apps>>

https://developer.apple.com/library/archive/documentation/Performance/Conceptual/EnergyGuide-iOS/index.html#//apple_ref/doc/uid/TP40015243-CH3-SW1
My iOS Energy Guidelines --- all key points are from Apple Documents
1. Common Causes of Energy Wasted by Background Apps
    * Not notifying the system when background activity is complete
    * Playing silent audio
    * Performing location updates
    * Interacting with Bluetooth accessories
    * Downloads that could be deferred

2. Suspend Activity When Your App Becomes Inactive or Moves to the Background
    * optional func applicationWillResignActive(_ application: UIApplication) {
    // Halt operations, animations, and UI updates
    }
    * optional func applicationDidEnterBackground(_ application: UIApplication) {
    // Halt operations, animations, and UI updates immediately
    }
    * Request additional background execution time if needed

3. Resume Activity When Your App Becomes Active
    * optional func applicationDidBecomeActive(_ application: UIApplication) {
    // Resume operations, animations, and UI updates
    }

4. Resolving Runaway Background App Crashes

5. Prioritise Work with Quality of Service Classes
    * About Quality of Service Classes
    User-interactive  == Work is virtually instantaneous.
    User-initiated    ==  Work is nearly instantaneous, such as a few seconds or less.
    Utility           ==  Work takes a few seconds to a few minutes.
    Background        ==  Work takes significant time, such as minutes or hours.
    * Optimally, run your app at a QoS level of utility or lower at least 90% of the time when user activity is not occurring.
    * Special QOS --- Default
    The priority level of this QoS falls between user-initiated and utility. This QoS is not intended to be used by developers to classify work. 
    Work that has no QoS information assigned is treated as default, and the GCD global queue runs at this level.
    * Special QOS --- Unspecified
    This represents the absence of QoS information and cues the system that an environmental QoS should be inferred. 
    Threads can have an unspecified QoS if they use legacy APIs that may opt the thread out of QoS.
    * Quality of Service Inference and Promotion
    A queue has no QoS assigned and an operation with a QoS is added to the queue. ---> The queue and its other operations, if any, remain unaffected.
    A queue has a QoS assigned, and an operation with a QoS is added to the queue. ---> The QoS of the queue is promoted if the QoS of the new operation is higher. Any of the queue’s operations with a lower QoS are also promoted. Any operations with a lower QoS that are added to the queue in the future will infer the higher QoS.
    The QoS of a queue is raised by changing the value of the queue’s qualityOfService property. ---> Any of the queue’s operations with a lower QoS are promoted to the higher QoS. Any operations with a lower QoS that are added to the queue in the future will infer the higher QoS.
    The QoS of a queue is lowered by changing the value of the queue’s qualityOfService property. --->  Any of the queue’s operations remain unaffected. Any operations that are added to the queue in the future will infer the lower QoS, unless they have a higher QoS assigned, in which case they will retain their assigned QoS level.
    * Many other more details for this topic on Apple website
6. Minimise Timer Use
    * Timer may wake up the phone unnecessarily. Regardless of the scenario, if there are many timer-invoked wakeups, the energy impact is high.
    * Get Event Notifications Without Using Timers
    * Updates to files ---> Dispatch Sources in Concurrency Programming Guide, https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091
    * Updates to systemwide files or directories ---> File System Programming Guide, https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672
    * Network events ---> Local and Remote Notification Programming Guide, https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/index.html#//apple_ref/doc/uid/TP40008194
    * Use GCD Tools for Synchronisation Instead of Timers
    func beginWork() { /* thread one */
        dispatch_async(myQueue, block)        
        }
    func waitForWorkToFinish() { /* thread two */
        dispatch_block_wait(block, DISPATCH_TIME_FOREVER)
        WorkController.workDidFinish()
        }
    * If You Must Use a Timer, Employ It Efficiently ---> games and other graphics-intensive apps

7. Minimize I/O
    * Minimise data writes. Write to files only when their content has changed, and aggregate changes into a single write whenever possible. Avoid writing out an entire file if only a few bytes have changed. If you frequently change small portions of large files, consider using a database to store the data instead.
    * Avoid accessing memory too frequently. If your app saves state information, make it do so only when that state information changes. Batch changes whenever possible to avoid writing small changes at frequent intervals.
    * Read and write data sequentially whenever possible. Jumping around within a file takes extra time to seek to the new location.
    * Read and write larger blocks of data from files whenever possible, keeping in mind that reading too much data at once might cause other problems. For example, reading the entire contents of a 32 MB file might trigger paging of those contents before the operation is complete.
    * For reading or writing significant amounts of data, consider using dispatch_io, which provides a GCD-based asynchronous API for doing file I/O. Using dispatch_io lets you specify your data needs at a high level, so the system can optimise your access. See Grand Central Dispatch (GCD) Reference.
    * If your data consists of structured content that is randomly accessed, store it in a database and access it using, for example, SQLite or Core Data. Using a database is especially important if the amount of data you are manipulating could grow to more than a few megabytes. See SQLite Software Library and Core Data Programming Guide.
    * Understand how the system caches file data and know how to optimise the use of those caches. Avoid caching data yourself unless you plan to refer to it more than once. See The System Has Its Own File Caching Mechanism in File System Programming Guide.
    * File Caching Mechanism ---> https://developer.apple.com/library/archive/documentation/Performance/Conceptual/FileSystem/Articles/FilePerformance.html#//apple_ref/doc/uid/20001987-99732
    * File System Programming Guide --->  https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672
    * Core Data Programming Guide. --> https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html#//apple_ref/doc/uid/TP40001075

8. React to Low Power Mode on iPhones

9. Minimise Networking
    * Compress Data
    * Cache Data ---> The NSURLCache and NSURLSession APIs can be used to implement in-memory and on-disk caches for URL request data.
    * Check Signal Conditions --->let reachability = SCNetworkReachabilityCreateWithName(nil, (hostName as NSString).UTF8String).takeRetainedValue()
    * Provide an Escape Route ---> Let the user cancel long-running or stalled network operations, and set appropriate timeouts

10. Batch network transactions

11. Measure Energy Impact with Xcode
    * Energy impact gauge. Provides live information about your app’s energy usage as it runs, and displays a graph of recent energy-related activity. The following areas are represented by the gauge in an Energy Impact table.
    * Cost and overhead. Blue bars illustrate the energy your app itself uses to perform work. Red bars show additional energy used by system resources that must be powered up to perform your app’s work.
    * CPU. A gray square in this row indicates that your app has used the CPU to perform work.
    * Network. A gray square in this row indicates that your app has performed network operations.
    * Location. A gray square in this row indicates that your app has utilized location services.
    * GPU. A gray square in this row indicates that your app has used the GPU to perform graphics-related activity, such as drawing content on screen or playing an animation.
    * Background. A gray square in this row indicates that your app is in a background state, but is still keeping the system awake.
    * Measure Energy Impact with Instruments ---> Profiling/Energy Diagnostics

