My own absolute guidelines for stable iOS Apps

1. Memory usage
    1. Watching carefully memory usage in devices(not simulator)
    2. Use of autoreleasepool in certain scenarios for early release of memory if needed
2. Memory leak
    1. Use tools include memory gauge, Xcode Profiling, deinit, memory graphing etc
    2. Always be careful about capturing self in closure
    3. Consider capturing the value instead of capturing the object
    4. Move the suspected code into a seperate project, and make sure deinit was executed is most effective 
3. Array and other collection type boundaries
    1. Either check the index boundary all the while or extension Collection to return an Optional
    2. Extension of Collection is preferred, at â€¨https://github.com/Josef-Pan/Swift-Collection-Extentsions/blob/main/Collections-Ext.swift
4. Excessive Code
    1. Remove all unnecessary code
    2. Do code refactoring regularly and combine some common operations into function/class/struct
5. Exception handling, all exceptions should be handled
6. Networking
    1. Do not assume network response will be as expected
    2. Slow/Jitter/Unstable/Broken, all scenarios have to be considered
7. Database Contention, do not assume database access will always be successful
8. Device specific testing, testing on all real devices if possible
9. Concurrency
    1. Always remember on which queue the code is running
    2. Always remember to switch back to main thread if the code is UI related 
    3. Always bare in mind that no type is thread safe in Swift, use semaphore to avoid simultaneous writing
